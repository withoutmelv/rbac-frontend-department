<script lang="ts" setup><{if !isTree}>
import type { VbenFormProps } from '#/adapter/form';<{/if}>
import type { VxeGridListeners, VxeGridProps } from '#/adapter/vxe-table';

import { ref } from 'vue';

import { Page } from '@vben/common-ui';

import { Button, message } from 'ant-design-vue';

import { useVbenVxeGrid } from '#/adapter/vxe-table';
import { <{moduleName}><{className}>Page, <{moduleName}><{className}>Remove } from '#/api/<{moduleName}>/<{kebabCaseName}>';
import { Icon } from '#/components/icon';
import { TableAction } from '#/components/table-action';<{if isTree}>
import { getChildIds } from '#/util/tool';<{/if}>

import DetailForm from './detail.vue';
import <{className}>Form from './form.vue';
import { gridSchemas<{if !isTree}>, searchFormSchemas<{/if}> } from './schemas';

const hasTopTableDropDownActions = ref(false);
const <{tableCamelName}>FormRef = ref();
const detailFormRef = ref();<{if isTree}>
const isExpand = ref(false);<{/if}><{if !isTree}>
const formOptions: VbenFormProps = {
  ...searchFormSchemas,
  collapsed: true,
};<{/if}>

const gridOptions: VxeGridProps<any> = {
  ...gridSchemas,
  toolbarConfig: {
    ...gridSchemas.toolbarConfig,
    slots: {
      buttons: 'toolbar-buttons',
    },
    custom: {
      // 自定义列-图标
      icon: 'vxe-icon-menu',
    },
  },
  border: false,
  height: 'auto',
  keepSource: true,<{if isTree}>
  pagerConfig: {
    enabled: false,
  },
  treeConfig: {
    transform: true,
    rowField: 'id',
    parentField: 'parentId',
  },<{/if}>
  proxyConfig: {
    ajax: {<{if isTree}>
      query: async () => {
        return await <{moduleName}><{className}>Page({});
      },<{else}>
      query: async ({ page }, formValues) => {
        return await <{moduleName}><{className}>Page({
          pageNum: page.currentPage,
          pageSize: page.pageSize,
          ...formValues,
        });
      },<{/if}>
    },<{if isTree}>
    response: {
      list: '',
    },<{/if}>
  },
};
const gridEvents: VxeGridListeners<any> = {
  checkboxChange() {
    // eslint-disable-next-line no-use-before-define
    const records = gridApi.grid.getCheckboxRecords();
    hasTopTableDropDownActions.value = records.length > 0;
  },
  checkboxAll() {
    // eslint-disable-next-line no-use-before-define
    const records = gridApi.grid.getCheckboxRecords();
    hasTopTableDropDownActions.value = records.length > 0;
  },
};
const [Grid, gridApi] = useVbenVxeGrid({<{if !isTree}>
  formOptions,<{/if}>
  gridOptions,
  gridEvents,
});<{if isTree}>
/**
 * 自定义刷新方法
 */
const reload = () => {
  gridApi.reload().then(() => {
    if (isExpand.value) {
      isExpand.value = false;
      // eslint-disable-next-line no-use-before-define
      handleExpandAndCollapse();
    }
  });
};<{/if}>
// 打开新增表单
const handleAdd = (record: any) => {
  <{tableCamelName}>FormRef.value.setData({
    record: {
      ...record,
    },
    isUpdate: false,<{if isTree}>
    gridApi: {
      ...gridApi,
      reload,
    },<{else}>
    gridApi,<{/if}>
  });
  <{tableCamelName}>FormRef.value.open();
};
// 打开编辑表单
const handleEdit = (record: any) => {
  <{tableCamelName}>FormRef.value.setData({
    record,
    isUpdate: true,<{if isTree}>
    gridApi: {
      ...gridApi,
      reload,
    },<{else}>
    gridApi,<{/if}>
  });
  <{tableCamelName}>FormRef.value.open();
};
// 打开详情
const handleDetail = (record: any) => {
  detailFormRef.value.setData({
    record,
  });
  detailFormRef.value.open();
};
// 删除
const handleDelete = (row: any) => {<{if isTree}>
  const ids = [];
  if (row) {
    ids.push(...getChildIds(row));
  }<{else}>
  let ids = [];
  if (row) {
    ids.push(row.id);
  } else {
    ids = gridApi.grid.getCheckboxRecords().map((item) => item.id);
  }<{/if}>
  <{moduleName}><{className}>Remove({ ids }).then(() => {
    message.success('删除成功');
    gridApi.reload();
  });
};<{ if isTree}>
/**
 * 展开/折叠
 */
const handleExpandAndCollapse = () => {
  if (isExpand.value) {
    gridApi.grid.setAllTreeExpand(false);
    isExpand.value = false;
  } else {
    gridApi.grid.setAllTreeExpand(true);
    isExpand.value = true;
  }
};<{/if}>
</script>

<template>
  <Page auto-content-height>
    <Grid>
      <template #toolbar-buttons>
        <TableAction
          :actions="[
            {
              label: '新增',
              type: 'primary',
              icon: 'ant-design:plus-outlined',
              auth: ['admin', '<{moduleName}>:<{tableCamelName}>:save'],
              onClick: handleAdd.bind(null),
            },<{if isTree}>
            {
              label: isExpand ? '折叠' : '展开',
              type: 'primary',
              icon: isExpand
                ? 'ant-design:menu-fold-outlined'
                : 'ant-design:menu-unfold-outlined',
              onClick: handleExpandAndCollapse.bind(null),
            },<{/if}>
          ]"<{if !isTree}>
          :drop-down-actions="[
            {
              label: '删除',
              icon: 'ant-design:delete-outlined',
              ifShow: hasTopTableDropDownActions,
              auth: ['admin', '<{moduleName}>:<{tableCamelName}>:remove'],
              popConfirm: {
                title: '确定删除吗？',
                confirm: handleDelete.bind(null, false),
              },
            },
          ]"<{/if}>
        >
          <template #more>
            <Button style="margin-left: 8px">
              批量操作
              <Icon icon="ant-design:down-outlined" />
            </Button>
          </template>
        </TableAction>
      </template>
      <template #toolbar-tools></template>
      <template #ACTION="{ row }">
        <TableAction
          :actions="[
            {
              label: '详情',
              type: 'link',
              size: 'small',
              auth: ['admin', '<{moduleName}>:<{tableCamelName}>:detail'],
              onClick: handleDetail.bind(null, row),
            },
            {
              label: '编辑',
              type: 'link',
              size: 'small',
              auth: ['admin', '<{moduleName}>:<{tableCamelName}>:update'],
              onClick: handleEdit.bind(null, row),
            },
          ]"
          :drop-down-actions="[<{if isTree}>
            {
              label: '添加下级',
              type: 'link',
              icon: 'ant-design:plus-outlined',
              size: 'small',
              auth: ['admin', '<{moduleName}>:<{tableCamelName}>:save'],
              onClick: handleAdd.bind(null, {
                parentId: row.id,
              }),
            },<{/if}>
            {
              label: '删除',
              icon: 'ant-design:delete-outlined',
              auth: ['admin', '<{moduleName}>:<{tableCamelName}>:remove'],
              popConfirm: {
                title: '确定删除吗？',
                confirm: handleDelete.bind(null, row),
              },
            },
          ]"
        />
      </template>
    </Grid>
    <<{className}>Form ref="<{tableCamelName}>FormRef" />
    <DetailForm ref="detailFormRef" />
  </Page>
</template>
